options:
  parameters:
    author: Alyse Jones and William "Chris" Headley
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: ofdm_txrx_rl
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: OFDM End-to-End Stream Testing (with GUI)
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 4.0]
    rotation: 0
    state: enabled

blocks:
- name: back_pad
  id: variable
  parameters:
    comment: ''
    value: num_zeros
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 204.0]
    rotation: 0
    state: enabled
- name: block_size
  id: variable
  parameters:
    comment: ''
    value: int((front_pad+back_pad+80+800)*(wide_samp_rate/(1e6))/num_channels)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 76.0]
    rotation: 0
    state: enabled
- name: cent_freq
  id: variable
  parameters:
    comment: ''
    value: 64e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 268.0]
    rotation: 0
    state: enabled
- name: channel_map
  id: variable
  parameters:
    comment: ''
    value: '[int(num_channels/2) + i*1 if i < int(num_channels/2) else -int(num_channels/2)+i*1
      for i in range(num_channels)]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 268.0]
    rotation: 0
    state: true
- name: fd
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 148.0]
    rotation: 0
    state: enabled
- name: fft_len
  id: variable
  parameters:
    comment: ''
    value: int(64)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 140.0]
    rotation: 0
    state: true
- name: front_pad
  id: variable
  parameters:
    comment: ''
    value: num_zeros
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 204.0]
    rotation: 0
    state: enabled
- name: head_size
  id: variable
  parameters:
    comment: ''
    value: int((front_pad+back_pad+num_samps)*(wide_samp_rate/(signal_samp_rate))*time_steps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 140.0]
    rotation: 0
    state: enabled
- name: noise_volt
  id: variable
  parameters:
    comment: ''
    value: pow(1.0/(fft_len*2*pow(10.0,snr/10.0)),0.5)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 76.0]
    rotation: 0
    state: enabled
- name: num_channels
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 140.0]
    rotation: 0
    state: true
- name: num_data_symbs
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 76.0]
    rotation: 0
    state: enabled
- name: num_header_symbs
  id: variable
  parameters:
    comment: ''
    value: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 140.0]
    rotation: 0
    state: enabled
- name: num_samps
  id: variable
  parameters:
    comment: ''
    value: num_data_symbs*80+num_header_symbs*80
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 204.0]
    rotation: 0
    state: enabled
- name: num_samps_per_step
  id: variable
  parameters:
    comment: ''
    value: head_size/time_steps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 204.0]
    rotation: 0
    state: enabled
- name: num_zeros
  id: variable
  parameters:
    comment: ''
    value: '2500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 268.0]
    rotation: 0
    state: true
- name: rand_seed
  id: variable
  parameters:
    comment: ''
    value: int(time.time())
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 76.0]
    rotation: 0
    state: true
- name: samps_per_symb
  id: variable
  parameters:
    comment: ''
    value: float(wide_samp_rate/signal_samp_rate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 76.0]
    rotation: 0
    state: true
- name: signal_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 16*1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [398, 138]
    rotation: 0
    state: true
- name: snr
  id: variable
  parameters:
    comment: ''
    value: '-50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 140.0]
    rotation: 0
    state: true
- name: taps
  id: variable
  parameters:
    comment: ''
    value: firdes.low_pass_2(1.0,1,(1/32)-0.01,0.01,80,window.WIN_BLACKMAN_HARRIS)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 76.0]
    rotation: 0
    state: enabled
- name: time_steps
  id: variable
  parameters:
    comment: ''
    value: 100*101
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 204.0]
    rotation: 0
    state: enabled
- name: velocity
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 148.0]
    rotation: 0
    state: enabled
- name: wavelength
  id: variable
  parameters:
    comment: ''
    value: (3*10^8)/cent_freq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1440, 148.0]
    rotation: 0
    state: enabled
- name: wide_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 16*32e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [399, 77]
    rotation: 0
    state: true
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 452.0]
    rotation: 0
    state: disabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '2'
    comment: ''
    freq: 0e6
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 596.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '2'
    comment: ''
    freq: 0e6
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 724.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 512.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: num_channels
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 940.0]
    rotation: 0
    state: enabled
- name: blocks_head_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: head_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 548.0]
    rotation: 0
    state: true
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 736.0]
    rotation: 0
    state: disabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: fd
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 860.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2088, 528.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 608.0]
    rotation: 0
    state: true
- name: blocks_streams_to_vector_0
  id: blocks_streams_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: num_channels
    type: complex
    vlen: '1'
  states:
    bus_sink: true
    bus_source: false
    bus_structure: null
    coordinate: [760, 932.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: wide_samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 548.0]
    rotation: 0
    state: true
- name: channels_channel_model2_0
  id: channels_channel_model2
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: ''
    epsilon: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: '0.0'
    seed: '0'
    taps: 1.0 + 1.0j
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2088, 568.0]
    rotation: 0
    state: disabled
- name: channels_channel_model_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: ''
    epsilon: '1.0'
    freq_offset: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: '1'
    seed: '0'
    taps: 1.0 + 1.0j
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1512, 620.0]
    rotation: 0
    state: true
- name: channels_fading_model_0
  id: channels_fading_model
  parameters:
    K: '4.0'
    LOS: 'False'
    N: '8'
    affinity: ''
    alias: ''
    comment: ''
    fDTs: fd/wide_samp_rate
    maxoutbuf: '0'
    minoutbuf: '0'
    seed: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 932.0]
    rotation: 0
    state: disabled
- name: channels_selective_fading_model_0
  id: channels_selective_fading_model
  parameters:
    K: '4.0'
    LOS: 'False'
    N: '8'
    affinity: ''
    alias: ''
    comment: ''
    delays: (0.0,0.1,1.3)
    fDTs: 10.0/signal_samp_rate
    mags: (1,0.99,0.97)
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '8'
    seed: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1528, 764.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport pmt\nimport numpy\
      \ as np\nfrom gnuradio import gr\nimport time\nimport random\nimport itertools\n\
      import copy\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self,log_file=None,num_channels=8,wide_samp_rate=20,time_steps=100,velocity=1):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Freq Control',   # will show up in GRC\n      \
      \      in_sig=None,\n            out_sig =None\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.log_file = log_file\n        self.num_channels\
      \ = num_channels\n        self.wide_samp_rate = wide_samp_rate\n        self.time_steps\
      \ = time_steps\n        self.velocity = velocity\n        self.msg_port_name_tx\
      \ = 'tx_cent_freq'\n        self.msg_port_name_rx = 'rx_cent_freq'\n       \
      \ self.msg_port_name_int = 'int_cent_freq'\n        self.msg_port_name_int2\
      \ = 'int2_cent_freq'\n        self.msg_port_name_fd = 'doppler'\n        self.msg_input_sensing\
      \ = 'sensing_results'\n        self.msg_input_packet = 'packet_results'\n  \
      \      self.message_port_register_out(pmt.intern(self.msg_port_name_rx))\n \
      \       self.message_port_register_out(pmt.intern(self.msg_port_name_tx))\n\
      \        self.message_port_register_out(pmt.intern(self.msg_port_name_int))\n\
      \        self.message_port_register_out(pmt.intern(self.msg_port_name_int2))\n\
      \        self.message_port_register_out(pmt.intern(self.msg_port_name_fd))\n\
      \        self.message_port_register_in(pmt.intern(self.msg_input_sensing))\n\
      \        self.set_msg_handler(pmt.intern(self.msg_input_sensing), self.handle_msg_sensing)\n\
      \        self.message_port_register_in(pmt.intern(self.msg_input_packet))\n\
      \        self.set_msg_handler(pmt.intern(self.msg_input_packet), self.handle_msg_packet)\n\
      \        self.cent_freqs = np.arange(-int(self.wide_samp_rate/2),int(self.wide_samp_rate/2),self.wide_samp_rate/self.num_channels)\n\
      \        self.cent_freqs = self.cent_freqs[1:]\n        print(self.cent_freqs)\n\
      \        self.position = 0\n        self.packet = False\n        self.channels\
      \ = []\n        self.state = False\n        self.count = 0\n        self.total\
      \ = 0\n        self.flag = False\n        self.flag_packet = False\n       \
      \ self.flag_sensing = False\n        self.cent_freq = 0e6\n        self.counter\
      \ = 0\n        self.counter_2 = 0\n        ### RL Stuff ### \n        self.min_epsilon\
      \ = 0.001\n        self.max_epsilon = 1\n        self.decay_rate = 0.1\n   \
      \     self.alpha = 0.25\n        self.gamma = 0.9\n        self.values = [0,1]\n\
      \        self.num_values = len(self.values)\n        self.time_window = 1\n\
      \        self.num_actions = self.num_channels-1\n        self.num_states = self.num_values**(self.num_actions*self.time_window)\n\
      \        self.epsilon = 0\n        #self.num_states = 1\n        '''\n     \
      \   self.order = 3\n        self.num_basis_functions = (self.order + 1)**(self.num_states)\n\
      \        self.c = np.array(list(itertools.product(range(self.order+1),repeat=self.num_states)),\
      \ dtype=np.int32)\n        '''\n        self.policy = np.zeros(self.num_states)\n\
      \        self.Q = np.zeros((self.num_states, self.num_actions))\n        self.action_space\
      \ = [*range(self.num_actions)]\n        self.a = 0\n        self.cumulative_reward\
      \ = 0\n        self.next_state = np.zeros(self.num_actions)\n        #self.s_next\
      \ = int(self.convertTupleToIndex(self.next_state))\n        self.s_next = 0\n\
      \        self.state = np.zeros(self.num_actions)\n        #self.s = int(self.convertTupleToIndex(self.state))\n\
      \        self.s = 0\n        #self.theta = np.zeros((self.num_actions, self.num_basis_functions))\n\
      \        self.total_packets = 0\n        self.packet_no_error = 0\n        self.int_pos\
      \ = random.sample(range(0,self.num_channels-1),self.num_channels-1)\n      \
      \  self.int2_pos = random.sample(range(0,self.num_channels-1),self.num_channels-1)\n\
      \        self.pos = []\n        self.sensing_errors = 0\n        self.chan =\
      \ []\n        self.int_freq = 0\n        self.int2_freq = 0\n        self.cent_freq\
      \ = 0\n        self.tot_sensing_errors = 0\n        self.packet_errors = 0\n\
      \        self.tot_packet_errors = 0\n        self.sensing_errors_list = []\n\
      \        self.packet_errors_list = []\n        self.reward_list = []\n     \
      \   self.tot_packet_errors_list = []\n        self.epsilon_count = 0\n     \
      \   \n    def handle_msg_packet(self, msg):\n    \t#if self.flag == True\n \
      \   \tpacketVal = pmt.to_python(msg)\n    \tself.counter += 1\n    \t#print('packet:\
      \ ' + str(self.counter))\n    \tif packetVal == False:\n    \t\tself.packet\
      \ = False\n    \telse:\n    \t\tself.packet = True\n    \tself.flag_packet =\
      \ True\n    \tif self.flag_sensing == True and self.flag_packet == True:\n \
      \   \t\tself.reinforcement_learning()\n    \n    def handle_msg_sensing(self,\
      \ msg): \n    \tself.channels = pmt.to_python(msg)\n    \tself.channels = [0\
      \ if i < 1 else 1 for i in self.channels]\n    \tself.flag_sensing = True\n\
      \    \tself.counter_2 += 1\n    \t#print(self.counter_2)\n    \tif self.flag_sensing\
      \ == True and self.flag_packet == True:\n    \t\tself.reinforcement_learning()\n\
      \    \n    def convertIndexToTuple(self,state):\n    \treturn(tuple(int(x) for\
      \ x in np.base_repr(state, self.num_values, self.num_actions)[-self.num_actions::]))\n\
      \    \n    def convertTupleToIndex(self,state):\n    \treturn(int(\"\".join(str(x)\
      \ for x in state), self.num_values))\n    \n    def reset(self):\n    \tfor\
      \ s in range(self.num_states):\n    \t\tself.policy[s] = random.randrange(0,self.num_channels)\n\
      \    \n    def decay_epsilon(self,t):\n    \tepsilon = self.min_epsilon + (self.max_epsilon\
      \ - self.min_epsilon) * np.exp(-self.decay_rate * t)\n    \treturn epsilon\n\
      \    \n    def choose_action(self,t):\n    \tp = random.uniform(0,1)\n    \t\
      if self.count % 100 == 0:\n    \t\tself.epsilon = self.decay_epsilon(self.epsilon_count)\n\
      \    \t\tself.epsilon_count += 1\n    \t'''\n    \tif t <= int(self.time_steps*0.25):\n\
      \    \t\tepsilon = 0.90\n    \telif t <= int(self.time_steps*0.5) and t > int(self.time_steps*0.25):\n\
      \    \t\tepsilon = 0.75\n    \telif t <= int(self.time_steps*0.75) and t > int(self.time_steps*0.5):\n\
      \    \t\tepsilon = 0.25\n    \telse:\n    \t\tepsilon = 0.01\n    \t'''\n  \
      \  \tif p > self.epsilon:\n    \t\tif self.count % 100 == 0:\n    \t\t\tself.policy\
      \ = self.Q.argmax(axis=1)\n    \t\ta = self.policy[self.s]\n    \telse:\n  \
      \  \t\ta = random.choice(list(enumerate(self.cent_freqs)))[0]\n    \treturn\
      \ a\n    \n    def reward_function(self):\n    \tif self.packet == False:\n\
      \    \t\treward = 0.0\n    \telse:\n    \t\treward = 1.0\n    \t\tself.packet_no_error\
      \ += 1\n    \treturn reward\n    \n    def reinforcement_learning(self):\n \
      \       self.flag_sensing = False\n        self.flag_packet = False\n      \
      \  self.total_packets += 1\n        self.pos.append(self.int_freq/(1e6))\n \
      \       self.pos.append(self.int2_freq/(1e6))\n        self.pos.append(self.cent_freq/(1e6))\n\
      \n        int_freq = self.cent_freqs[self.int_pos[self.position]]*1e6\n    \
      \    int2_freq = self.cent_freqs[self.int2_pos[self.position]]*1e6\n       \
      \ self.position += 1\n        if self.position == len(self.cent_freqs):\n  \
      \      \tself.position = 0\n\n        self.reward = self.reward_function()\n\
      \        self.cumulative_reward += self.reward\n        self.next_state = [int(x)\
      \ for x in self.channels]\n        self.s_next = int(self.convertTupleToIndex(self.next_state))\n\
      \        # update Q matrix\n        self.metric = self.alpha * (self.reward\
      \ + self.gamma * np.max(self.Q[int(self.s_next), :]) - self.Q[self.s,self.a])\n\
      \        self.Q[self.s,self.a] += self.metric\n        \t\n        # update\
      \ state to next state\n        self.state = self.next_state\n        self.s\
      \ = int(self.convertTupleToIndex(self.state))\n\n        # choose next action\n\
      \        self.a = int(self.choose_action(self.count))\n        cent_freq = self.cent_freqs[self.a]*1e6\n\
      \        fd = (self.velocity*cent_freq)/(3*10^8)\n        #print(fd/(self.wide_samp_rate*1e6))\n\
      \n        PMT_msg_tx =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"freq\"),\
      \ pmt.from_float(cent_freq))\n        PMT_msg_rx =  pmt.dict_add(pmt.make_dict(),\
      \ pmt.intern(\"freq\"), pmt.from_float(-cent_freq))\n        PMT_msg_fd =  pmt.dict_add(pmt.make_dict(),\
      \ pmt.intern(\"fd\"), pmt.from_float(fd))\n        self.message_port_pub(pmt.intern(self.msg_port_name_tx),\
      \ PMT_msg_tx)\n        self.message_port_pub(pmt.intern(self.msg_port_name_rx),\
      \ PMT_msg_rx)\n        self.message_port_pub(pmt.intern(self.msg_port_name_fd),\
      \ PMT_msg_fd)\n\n\t# check for sensing errors\n        self.chan = [0 if i <\
      \ 1 else 1 for i in self.channels]\n        self.int_freq = int_freq\n     \
      \   self.int2_freq = int2_freq\n        self.cent_freq = cent_freq\n       \
      \ # check sensing and packet errors\n        c = 0\n        if self.count !=\
      \ 0:\t\n        \tfor i in self.pos:\n        \t\tif c == len(self.pos)-1:\n\
      \        \t\t\tif self.pos.count(i) > 1 and self.packet != False:\n        \t\
      \t\t\tself.packet_errors = 1\n        \t\t\tif sum(self.chan) > 2 and self.packet\
      \ == False:\n        \t\t\t\tself.sensing_errors = 1\n        \t\tidx = np.where(self.cent_freqs\
      \ == i)[0][0]+1\n        \t\tif self.chan[idx] == 0:\n        \t\t\tself.sensing_errors\
      \ = 1\n        \t\tif sum(self.chan) > 3:\n        \t\t\tself.sensing_errors\
      \ = 1\n        \t\tc += 1\n        if self.sensing_errors == 1:\n        \t\
      self.tot_sensing_errors += 1\n        if self.packet_errors == 1:\n        \t\
      self.tot_packet_errors += 1\n        \n        # save info\n        \n     \
      \   if self.count == 0:\n        \topen(self.log_file, 'w').close()\n      \
      \  \n        file1 = open(self.log_file, \"a\")\n        file1.write(\"Count:\
      \ \" + str(self.count) + \" \\n\")\n        file1.write(\"Interferer 1 Frequency:\
      \ \" + str(int_freq) + \" \\n\")\n        file1.write(\"Interferer 2 Frequency:\
      \ \" + str(int2_freq) + \" \\n\")\n        file1.write(\"Next Frequency: \"\
      \ + str(cent_freq) + \" \\n\")\n        file1.write(\"Packet: \" + str(self.packet)\
      \ + \" \\n\")\n        file1.write(\"Sensing: \" + str([0 if i < 1 else 1 for\
      \ i in self.channels]) + \" \\n\")\n        file1.write(\"Sensing: \" + str(self.chan)\
      \ + \" \\n\")\n        file1.write(\"Reward: \" + str(self.cumulative_reward)\
      \ + \" \\n\")\n        file1.write(\"Pos: \" + str(self.pos) + \" \\n \")\n\
      \        file1.write(\"Sensing Errors: \" + str(self.sensing_errors) + \" \"\
      \ + str(self.tot_sensing_errors) + \" \\n\")\n        file1.write(\"Packet Errors:\
      \ \" + str(self.packet_errors) + \" \" + str(self.tot_packet_errors) + \" \\\
      n\")\n        file1.write(\"\\n\")\n        file1.close()\n        \n      \
      \  # send messages\n        #PMT_msg_tx =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"\
      freq\"), pmt.from_float(cent_freq))\n        #PMT_msg_rx =  pmt.dict_add(pmt.make_dict(),\
      \ pmt.intern(\"freq\"), pmt.from_float(-cent_freq))\n        PMT_msg_int = \
      \ pmt.dict_add(pmt.make_dict(), pmt.intern(\"freq\"), pmt.from_float(int_freq))\n\
      \        PMT_msg_int2 =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"freq\"),\
      \ pmt.from_float(int2_freq))\n        #self.message_port_pub(pmt.intern(self.msg_port_name_tx),\
      \ PMT_msg_tx)\n        #self.message_port_pub(pmt.intern(self.msg_port_name_rx),\
      \ PMT_msg_rx)\n        self.message_port_pub(pmt.intern(self.msg_port_name_int),\
      \ PMT_msg_int)\n        self.message_port_pub(pmt.intern(self.msg_port_name_int2),\
      \ PMT_msg_int2)\n        self.count += 1\n        \n        # reset variables\n\
      \        self.pos = []\n        self.sensing_errors = 0\n        self.packet_errors\
      \ = 0\n        \n        if self.count % 100 == 0:\n        \tprint(self.count,\
      \ self.epsilon, self.tot_sensing_errors, self.tot_packet_errors, self.cumulative_reward)\n\
      \        \tself.sensing_errors_list.append(self.tot_sensing_errors)\n      \
      \  \tself.packet_errors_list.append(self.tot_packet_errors)\n        \tself.reward_list.append(self.cumulative_reward)\n\
      \        \tself.tot_packet_errors_list.append(self.total_packets-self.packet_no_error)\n\
      \        \tself.tot_sensing_errors = 0\n        \tself.tot_packet_errors = 0\n\
      \        \tself.cumulative_reward = 0\n        \tself.total_packets = 0\n  \
      \      \tself.packet_no_error = 0\n        if self.count == 10000:\n       \
      \ \tfile2 = open('/home/hume-users/alysemjones/rl_ofdm_dsa/data_logs/result.txt',\
      \ \"a\")\n        \tfile2.write(str(self.num_channels) + \" Channels: No USRP\"\
      \ + \" \\n\")\n        \tfile2.write(\"Reward: \" + str(self.reward_list) +\
      \ \" \\n\")\n        \tfile2.write(\"Sensing Errors: \" + str(self.sensing_errors_list)\
      \ + \" \\n\")\n        \tfile2.write(\"Packet Feedback Errors: \" + str(self.packet_errors_list)\
      \ + \" \\n\")\n        \tfile2.write(\"Packet Errors: \" + str(self.tot_packet_errors_list)\
      \ + \" \\n\")\n        \tfile2.write(\"\\n\")\n        \tfile2.close()\n   \
      \ \t\n    def work(self, input_items, output_items):\n    \t#tagTuple = self.get_tags_in_window(0,\
      \ 0, len(input_items[0]))\n    \t#self.total += len(input_items[0])\n    \t\
      '''\n    \tif self.total <= 57600*self.count:\n    \t\tpass\n    \telse:\n \
      \   \t\tself.count += 1\n    \t\tif self.flag_sensing == True and self.flag_packet\
      \ == True:\n    \t\t\tself.reinforcement_learning() \n    \t\n    \tfor tag\
      \ in tagTuple:\n    \t\tif (pmt.to_python(tag.key) == 'start_RL'):\n    \t\t\
      \tself.count += 1\n    \t\t\t#if self.flag_sensing == True and self.flag_packet\
      \ == True:\n    \t\t\tif self.flag == True:\n    \t\t\t\tself.flag_sensing =\
      \ False\n    \t\t\t\tself.flag_packet = False\n    \t\t\t\tself.flag = False\n\
      \    \t\t\t\tself.reinforcement_learning()\n    \t'''\n    \treturn 0\n    \
      \     \n"
    affinity: ''
    alias: ''
    comment: ''
    log_file: '''../data_logs/rl.txt'''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_channels: num_channels
    time_steps: time_steps
    velocity: velocity
    wide_samp_rate: wide_samp_rate/(1e6)
  states:
    _io_cache: ('Freq Control', 'blk', [('log_file', 'None'), ('num_channels', '8'),
      ('wide_samp_rate', '20'), ('time_steps', '100'), ('velocity', '1')], [('packet_results',
      'message', 1), ('sensing_results', 'message', 1)], [('doppler', 'message', 1),
      ('int2_cent_freq', 'message', 1), ('int_cent_freq', 'message', 1), ('tx_cent_freq',
      'message', 1), ('rx_cent_freq', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['log_file', 'num_channels', 'time_steps', 'velocity',
      'wide_samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 728.0]
    rotation: 180
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, num_chans=8,\
      \ log_file=None):  # only default arguments here\n        \"\"\"arguments to\
      \ this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Sensing',   # will show up in GRC\n  \
      \          in_sig=[(np.float32,num_chans)],\n            out_sig=None\n    \
      \    )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.num_chans\
      \ = num_chans\n        self.log_file = log_file\n        self.energy_vect =\
      \ np.zeros(self.num_chans)\n        self.start_flag = 0\n        self.end_flag\
      \ = 0\n        self.num_samps = 0\n        self.count = 0\n        \n      \
      \  self.portName = 'energy_vec'\n        self.message_port_register_out(pmt.intern(self.portName))\n\
      \    \n    def work(self, input_items, output_items):\n        tagTuple = self.get_tags_in_window(0,\
      \ 0, len(input_items[0]))\n        if self.count == 0:\n        \topen(self.log_file,\
      \ 'w').close()\n        start_index = 0\n        end_index = len(input_items[0])\n\
      \        for tag in tagTuple:\n            if (pmt.to_python(tag.key) == 'burst_start')\
      \ and ~start_index:\n                self.energy_vect = np.zeros(self.num_chans)\n\
      \                start_index = tag.offset - self.nitems_read(0)\n          \
      \      self.start_flag = 1\n            if (pmt.to_python(tag.key) == 'burst_end')\
      \ and ~end_index:\n                end_index = tag.offset - self.nitems_read(0)\n\
      \                self.end_flag = 1\n                             \n        if\
      \ self.start_flag == 1:\n            for i in range(start_index,end_index):\n\
      \                self.energy_vect += input_items[0][i]\n                self.num_samps\
      \ += 1\n            \n        if self.end_flag == 1:\n            #print('Num\
      \ Samps: ' + str(self.num_samps))\n            self.message_port_pub(pmt.intern(self.portName),\
      \ pmt.to_pmt(self.energy_vect/self.num_samps))\n            '''\n          \
      \  file1 = open(self.log_file, \"a\")\n            file1.write(\"Count: \" +\
      \ str(self.count) + \" \\n\")\n            file1.write(\"Sensing: \" + str(self.energy_vect/self.num_samps)\
      \ + \" \\n\")\n            file1.write(\"\\n\")\n            file1.close()\n\
      \            '''\n            self.start_flag = 0\n            self.end_flag\
      \ = 0\n            self.num_samps = 0\n            self.count += 1\n       \
      \ \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    log_file: '''../data_logs/sensing.txt'''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_chans: num_channels
  states:
    _io_cache: ('Sensing', 'blk', [('num_chans', '8'), ('log_file', 'None')], [('0',
      'float', 8)], [('energy_vec', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['log_file', 'num_chans'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 932.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import sqrt
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 132.0]
    rotation: 0
    state: enabled
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import erfc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 180.0]
    rotation: 0
    state: true
- name: import_0_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import log10
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 228.0]
    rotation: 0
    state: enabled
- name: import_0_0_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import time
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 276.0]
    rotation: 0
    state: enabled
- name: note_0_0_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Tunable Variables
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 20.0]
    rotation: 0
    state: true
- name: note_0_0_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Fixed Variables
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 20.0]
    rotation: 0
    state: true
- name: note_0_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Derived Variables
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 20.0]
    rotation: 0
    state: true
- name: ofdm_rx_hier_0
  id: ofdm_rx_hier
  parameters:
    affinity: ''
    alias: ''
    cent_freq: -cent_freq
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    signal_samp_rate: signal_samp_rate
    wide_samp_rate: wide_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1768, 524.0]
    rotation: 0
    state: enabled
- name: ofdm_tx_hier_0
  id: ofdm_tx_hier
  parameters:
    affinity: ''
    alias: ''
    back_pad: back_pad
    cent_freq: cent_freq
    comment: ''
    front_pad: front_pad
    maxoutbuf: '0'
    minoutbuf: '0'
    signal_samp_rate: signal_samp_rate
    wide_samp_rate: wide_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 532.0]
    rotation: 0
    state: true
- name: pfb_channelizer_ccf_1_0
  id: pfb_channelizer_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '80'
    bus_structure_source: ''
    ch_map: channel_map
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nchans: num_channels
    osr: '1'
    samp_delay: '0'
    taps: firdes.low_pass_2(1.0,1,1/num_channels/2,(1/num_channels)*0.1,80,window.WIN_BLACKMAN_HARRIS)
  states:
    bus_sink: false
    bus_source: true
    bus_structure: null
    coordinate: [448, 916.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: wide_samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: num_channels
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.5'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: true
    bus_source: false
    bus_structure: null
    coordinate: [760, 1012.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 2,1,1,1
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Transmitted OFDM Burst"'
    nconnections: '1'
    size: int(head_size/time_steps)
    srate: wide_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '64'
    ymin: '-64'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 292.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: sensing_stream
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 468.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: sensing_stream
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 940.0]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '0']
- [analog_sig_source_x_0, '0', blocks_add_xx_0, '2']
- [analog_sig_source_x_0_0, '0', blocks_add_xx_0, '0']
- [blocks_add_xx_0, '0', channels_channel_model_0, '0']
- [blocks_add_xx_0, '0', channels_fading_model_0, '0']
- [blocks_add_xx_0, '0', channels_selective_fading_model_0, '0']
- [blocks_add_xx_0, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_add_xx_0, '0', virtual_sink_0, '0']
- [blocks_complex_to_mag_squared_0, '0', epy_block_1, '0']
- [blocks_head_0, '0', blocks_throttle_0, '0']
- [blocks_streams_to_vector_0, '0', blocks_complex_to_mag_squared_0, '0']
- [blocks_throttle_0, '0', blocks_add_xx_0, '1']
- [channels_channel_model_0, '0', ofdm_rx_hier_0, '0']
- [channels_fading_model_0, '0', channels_channel_model_0, '0']
- [channels_selective_fading_model_0, '0', ofdm_rx_hier_0, '0']
- [epy_block_0, doppler, blocks_message_debug_0, print]
- [epy_block_0, doppler, blocks_msgpair_to_var_0, inpair]
- [epy_block_0, int2_cent_freq, analog_sig_source_x_0_0, cmd]
- [epy_block_0, int_cent_freq, analog_sig_source_x_0, cmd]
- [epy_block_0, rx_cent_freq, ofdm_rx_hier_0, cent_freq]
- [epy_block_0, tx_cent_freq, ofdm_tx_hier_0, cent_freq]
- [epy_block_1, energy_vec, epy_block_0, sensing_results]
- [ofdm_rx_hier_0, '0', blocks_null_sink_0, '0']
- [ofdm_rx_hier_0, packet_data, epy_block_0, packet_results]
- [ofdm_tx_hier_0, '0', blocks_head_0, '0']
- [ofdm_tx_hier_0, '1', blocks_null_sink_0_0, '0']
- [pfb_channelizer_ccf_1_0, '8', blocks_streams_to_vector_0, '8']
- [virtual_source_0, '0', pfb_channelizer_ccf_1_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.4.0
