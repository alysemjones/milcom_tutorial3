options:
  parameters:
    author: Alyse Jones and William "Chris" Headley
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: ofdm_txrx_only
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: OFDM End-to-End Stream Testing (with GUI)
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 4.0]
    rotation: 0
    state: enabled

blocks:
- name: N
  id: variable
  parameters:
    comment: ''
    value: num_channels*8
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 204.0]
    rotation: 0
    state: true
- name: back_pad
  id: variable
  parameters:
    comment: ''
    value: num_zeros
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 204.0]
    rotation: 0
    state: enabled
- name: buffer_percentage
  id: variable
  parameters:
    comment: ''
    value: '0.25'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 332.0]
    rotation: 0
    state: true
- name: cent_freq
  id: variable
  parameters:
    comment: ''
    value: cent_freq_list[0]+freq_usrp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 268.0]
    rotation: 0
    state: enabled
- name: cent_freq_list
  id: variable
  parameters:
    comment: ''
    value: '[int(i) for i in np.linspace(-wide_samp_rate/2+signal_samp_rate/2, wide_samp_rate/2-signal_samp_rate/2,
      num_channels)]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 268.0]
    rotation: 0
    state: enabled
- name: cent_freq_rx
  id: variable
  parameters:
    comment: ''
    value: -cent_freq_list[0]+freq_usrp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 332.0]
    rotation: 0
    state: enabled
- name: channel_map
  id: variable
  parameters:
    comment: ''
    value: '[int(num_channels/2) + i*1 if i < int(num_channels/2) else -int(num_channels/2)+i*1
      for i in range(num_channels)]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 332.0]
    rotation: 0
    state: true
- name: fft_len
  id: variable
  parameters:
    comment: ''
    value: int(64)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 140.0]
    rotation: 0
    state: true
- name: freq_fosphor
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 268.0]
    rotation: 0
    state: true
- name: freq_usrp
  id: variable
  parameters:
    comment: ''
    value: 2.35e9
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 204.0]
    rotation: 0
    state: true
- name: front_pad
  id: variable
  parameters:
    comment: ''
    value: num_zeros
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 204.0]
    rotation: 0
    state: enabled
- name: head_size
  id: variable
  parameters:
    comment: ''
    value: int((front_pad+back_pad+num_samps)*(signal_samp_rate/(signal_samp_rate))*time_steps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 140.0]
    rotation: 0
    state: enabled
- name: linear_gain
  id: variable
  parameters:
    comment: ''
    value: '650'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 268.0]
    rotation: 0
    state: true
- name: noise_volt
  id: variable
  parameters:
    comment: ''
    value: pow(1.0/(fft_len*2*pow(10.0,snr/10.0)),0.5)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 76.0]
    rotation: 0
    state: enabled
- name: num_channels
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 140.0]
    rotation: 0
    state: true
- name: num_data_symbs
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 76.0]
    rotation: 0
    state: enabled
- name: num_header_symbs
  id: variable
  parameters:
    comment: ''
    value: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 76.0]
    rotation: 0
    state: enabled
- name: num_samps
  id: variable
  parameters:
    comment: ''
    value: num_data_symbs*80+num_header_symbs*80
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 204.0]
    rotation: 0
    state: enabled
- name: num_samps_per_step
  id: variable
  parameters:
    comment: ''
    value: head_size/time_steps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 204.0]
    rotation: 0
    state: enabled
- name: num_zeros
  id: variable
  parameters:
    comment: ''
    value: '1500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 268.0]
    rotation: 0
    state: true
- name: rand_seed
  id: variable
  parameters:
    comment: ''
    value: int(time.time())
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 76.0]
    rotation: 0
    state: true
- name: rx_gain
  id: variable
  parameters:
    comment: ''
    value: '35'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 268.0]
    rotation: 0
    state: true
- name: samps_per_symb
  id: variable
  parameters:
    comment: ''
    value: float(wide_samp_rate/signal_samp_rate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 76.0]
    rotation: 0
    state: true
- name: signal_samp_rate
  id: variable
  parameters:
    comment: ''
    value: wide_samp_rate/num_channels
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [398, 138]
    rotation: 0
    state: true
- name: snr
  id: variable
  parameters:
    comment: ''
    value: '20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 140.0]
    rotation: 0
    state: true
- name: taps
  id: variable
  parameters:
    comment: ''
    value: firdes.low_pass_2(1.0,1,1/num_channels/2,(1/num_channels)*0.1,80,window.WIN_BLACKMAN_HARRIS)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 76.0]
    rotation: 0
    state: enabled
- name: time_steps
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 204.0]
    rotation: 0
    state: enabled
- name: tx_gain
  id: variable
  parameters:
    comment: ''
    value: '35'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 268.0]
    rotation: 0
    state: true
- name: wide_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [399, 77]
    rotation: 0
    state: true
- name: analog_noise_source_x_0_0_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: noise_volt
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 1140.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1.0'
    comment: ''
    freq: int(cent_freq-freq_usrp)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0.0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 868.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '2.5'
    comment: ''
    freq: cent_freq_list[1]
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 444.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '2.5'
    comment: ''
    freq: cent_freq_list[2]
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 580.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1.0'
    comment: ''
    freq: int(-cent_freq+freq_usrp)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0.0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 836.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 1192.0]
    rotation: 0
    state: true
- name: blocks_add_xx_1
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 720.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: N
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 1204.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.125'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 748.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 768.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_1
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1664, 752.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 992.0]
    rotation: 180
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: N
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 1208.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_align_0
  id: blocks_tagged_stream_align
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: burst_start
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 1204.0]
    rotation: 0
    state: enabled
- name: channels_channel_model_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: ''
    epsilon: '1.0'
    freq_offset: '0.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: '0.1'
    seed: '0'
    taps: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 708.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport pmt\nimport numpy\
      \ as np\nfrom gnuradio import gr\nimport time\nimport random\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,num_channels=8,wide_samp_rate=2e6,\
      \ cent_freqs=[],log_file=None):  # only default arguments here\n        \"\"\
      \"arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Cognitive Engine',   # will show up in\
      \ GRC\n            in_sig=None,\n            out_sig=None\n        )\n     \
      \   # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).\n        self.num_channels\
      \ = num_channels\n        self.wide_samp_rate = wide_samp_rate\n        self.cent_freqs\
      \ = cent_freqs\n        self.log_file = log_file\n        self.samp_rate = int(self.wide_samp_rate/(1e6))\n\
      \        # message stuff\n        self.msg_port_name_tx = 'tx_freq'\n      \
      \  self.msg_port_name_rx = 'rx_freq'\n        self.msg_port_name_int = 'int_cent_freq'\n\
      \        self.msg_port_name_int2 = 'int2_cent_freq'\n        self.msg_input_sensing\
      \ = 'sensing_results'\n        self.msg_input_packet = 'packet_results'\n  \
      \      self.msg_input_change_rx = 'rx_handler_psd'\n        self.message_port_register_out(pmt.intern(self.msg_port_name_tx))\n\
      \        self.message_port_register_out(pmt.intern(self.msg_port_name_rx))\n\
      \        self.message_port_register_out(pmt.intern(self.msg_port_name_int))\n\
      \        self.message_port_register_out(pmt.intern(self.msg_port_name_int2))\n\
      \        self.message_port_register_in(pmt.intern(self.msg_input_sensing))\n\
      \        self.set_msg_handler(pmt.intern(self.msg_input_sensing), self.handle_msg_sensing)\n\
      \        self.message_port_register_in(pmt.intern(self.msg_input_packet))\n\
      \        self.set_msg_handler(pmt.intern(self.msg_input_packet), self.handle_msg_packet)\n\
      \        self.message_port_register_in(pmt.intern(self.msg_input_change_rx))\n\
      \        self.set_msg_handler(pmt.intern(self.msg_input_change_rx), self.handle_msg_rx_freq)\n\
      \        self.position = 0\n        self.count_sensor = 0\n        self.count_packet\
      \ = 0\n        self.counter = 0\n        self.count = 0\n        self.packet\
      \ = False\n        self.packet_flag = False\n        self.sensor_flag = False\n\
      \        self.cent_freq = -500000\n        self.int_freq = -83333\n        self.int2_freq\
      \ = 83333\n        self.packet_errors = 0\n        self.tot_packet_errors =\
      \ 0\n        self.sensing_errors = 0\n        self.tot_sensing_errors = 0\n\
      \        self.pos = []\n        self.int_pos = random.sample(range(0,self.num_channels-1),self.num_channels-1)\n\
      \        self.int2_pos = random.sample(range(0,self.num_channels-1),self.num_channels-1)\n\
      \        ### RL Stuff ### \n        self.min_epsilon = 0.001\n        self.max_epsilon\
      \ = 1\n        self.decay_rate = 0.1\n        self.alpha = 0.9\n        self.gamma\
      \ = 0.1\n        self.values = [0,1]\n        self.num_values = len(self.values)\n\
      \        self.time_window = 1\n        self.num_actions = self.num_channels\n\
      \        self.num_states = self.num_values**(self.num_actions*self.time_window)\n\
      \        self.epsilon = 0\n        self.policy = np.zeros(self.num_states)\n\
      \        self.Q = np.zeros((self.num_states, self.num_actions))\n        self.action_space\
      \ = [*range(self.num_actions)]\n        self.a = 0\n        self.cumulative_reward\
      \ = 0\n        self.next_state = np.zeros(self.num_actions)\n        self.s_next\
      \ = 0\n        self.state = np.zeros(self.num_actions)\n        self.s = 0\n\
      \        self.sensing_errors_list = []\n        self.reward_list = []\n    \
      \    self.tot_packet_errors_list = []\n        self.epsilon_count = 0\n    \
      \    self.reward = 0\n        self.cumulative_reward_list = []\n        self.packet_error_list\
      \ = []\n        self.sensing_error_list = []\n        self.previous_reward =\
      \ 0\n        self.count_previous = 0\n        self.change = 0\n        self.empty\
      \ = []\n        self.previous_state = []\n        self.start_time = 0\n    \
      \    self.time_diff = 0\n        self.time_diff_avg = 0\n        self.time_diff_avg_list\
      \ = []\n    \n    def handle_msg_sensing(self, msg): \n    \tself.channels =\
      \ pmt.to_python(msg)\n    \tself.channels = [0 if i < 2 else 1 for i in self.channels]\n\
      \    \tself.count_sensor += 1\n    \tself.sensor_flag = True\n    \tif self.count_sensor\
      \ < 100*101:\n    \t   self.pos = []\n    \t   self.sensing_errors = 0\n   \
      \ \t   self.packet_errors = 0\n    \t   self.reinforcement_learning()\n\n  \
      \  def handle_msg_packet(self, msg):\n    \tpacketVal = pmt.to_python(msg)\n\
      \    \tself.counter += 1\n    \tif packetVal == False:\n    \t\tself.packet\
      \ = False\n    \telse:\n    \t\tself.packet = True\n    \t\tself.count_packet\
      \ += 1\n    \t\tself.packet_flag = True\n        \n    def handle_msg_rx_freq(self,\
      \ msg):\n        end_time = time.time()\n        self.check_sensing_errors()\n\
      \        self.time_diff += end_time - self.start_time\n        \n        # decide\
      \ reward here\n        if self.packet == True:\n        \tself.reward = 0\n\
      \        else:\n        \tself.reward = 1\n           \n        if self.count\
      \ % 100 == 0:\n           self.time_diff_avg = self.time_diff/100\n        \
      \  # print(self.count, self.epsilon, self.count_packet, self.previous_reward,\
      \ self.cumulative_reward, self.tot_sensing_errors, self.tot_packet_errors, self.time_diff_avg)\n\
      \           print(self.count, self.cumulative_reward)\n           self.previous_reward\
      \ = self.cumulative_reward\n           self.cumulative_reward_list.append(self.cumulative_reward)\n\
      \           self.packet_error_list.append(self.tot_packet_errors)\n        \
      \   self.sensing_error_list.append(self.tot_sensing_errors)\n           self.time_diff_avg_list.append(self.time_diff_avg)\n\
      \           self.cumulative_reward = 0\n           self.tot_sensing_errors =\
      \ 0\n           self.tot_packet_errors = 0\n           self.count_packet = 0\n\
      \           self.time_diff = 0\n           self.time_diff_avg = 0\n        self.packet_flag\
      \ = False\n        self.count += 1\n        self.packet = False\n        if\
      \ self.count == 10000:\n           self.save_data()\n    \n    def save_data(self):\n\
      \        f = open(self.log_file, \"a\")\n        f.write(\"Reward: \" + str(self.cumulative_reward_list)\
      \ + \"\\n\")\n        f.write(\"Sensing Errors: \" + str(self.sensing_error_list)\
      \ + \"\\n\")\n        f.write(\"Packet Errors: \" + str(self.packet_error_list)\
      \ + \"\\n\")\n        f.write(\"Time diff: \" + str(self.time_diff_avg_list)\
      \ + \"\\n\")\n        f.write(\"\\n\")\n        f.close()\n    \n    def check_sensing_errors(self):\n\
      \        c = 0\n        idx_list = []\n        if self.count != 0:\n       \
      \ \tfor i in self.pos:\n        \t\tidx = np.where(np.array(self.cent_freqs)\
      \ == i)[0][0]\n        \t\tidx_list.append(idx)\n        \t\tif self.channels[idx]\
      \ == 0:\n        \t\t\tself.sensing_errors = 1\n        \t\tif sum(self.channels)\
      \ > 3:\n        \t\t\tself.sensing_errors = 1\n        \t\tc += 1\n        \t\
      if (idx_list[1] == idx_list[0]) and self.packet != False:\n        \t    self.packet_errors\
      \ = 1\n        \tif (idx_list[2] == idx_list[0]) and self.packet != False:\n\
      \        \t    self.packet_errors = 1\n        \tif sum(self.channels) == 1\
      \ and self.packet != False:\n        \t    self.packet_errors = 1\n        \t\
      if (idx_list[1] == idx_list[2]) and (idx_list[0] != idx_list[1]):\n        \t\
      \    if self.packet != True:\n        \t       self.packet_errors = 1\n    \
      \    \t    else:\n        \t       self.packet_errors = 0\n        if self.sensing_errors\
      \ == 1:\n               self.tot_sensing_errors += 1\n        if self.packet_errors\
      \ == 1:\n               self.tot_packet_errors += 1\n\n    def convertIndexToTuple(self,state):\n\
      \    \treturn(tuple(int(x) for x in np.base_repr(state, self.num_values, self.num_actions)[-self.num_actions::]))\n\
      \    \n    def convertTupleToIndex(self,state):\n    \treturn(int(\"\".join(str(x)\
      \ for x in state), self.num_values))\n    \n    def reset(self):\n    \tfor\
      \ s in range(self.num_states):\n    \t\tself.policy[s] = random.randrange(0,self.num_channels)\n\
      \    \n    def decay_epsilon(self,t):\n    \tepsilon = self.min_epsilon + (self.max_epsilon\
      \ - self.min_epsilon) * np.exp(-self.decay_rate * t)\n    \treturn epsilon\n\
      \n    def choose_action(self):\n    \tn = random.uniform(0,1)\n    \tif self.count\
      \ % 100 == 0:\n    \t\tself.epsilon = self.decay_epsilon(self.epsilon_count)\n\
      \    \t\tself.epsilon_count += 1\n    \tif n > self.epsilon:\n    \t\tif self.count\
      \ % 100 == 0:\n    \t\t\tself.policy = self.Q.argmax(axis=1)\n    \t\ta = self.policy[self.s]\n\
      \    \telse:\n    \t\ta = random.choice(list(enumerate(self.cent_freqs)))[0]\n\
      \    \treturn a\n    \n    def reinforcement_learning(self):\n        if self.count\
      \ == 0:\n                self.pos.append(int(self.cent_freqs[0]))\n        \
      \        self.pos.append(int(self.int_freq))\n                self.pos.append(int(self.int2_freq))\n\
      \        else:\n                self.pos.append(int(self.cent_freq))\n     \
      \           self.pos.append(int(self.int_freq))\n                self.pos.append(int(self.int2_freq))\n\
      \        \n        self.cumulative_reward += self.reward\n        # start RL\
      \ stuff here\n        self.next_state = [int(x) for x in self.channels]\n  \
      \      self.s_next = int(self.convertTupleToIndex(self.next_state))\n      \
      \  # update Q matrix\n        self.Q[self.s,self.a] += self.alpha * (self.reward\
      \ + self.gamma * np.max(self.Q[int(self.s_next),:]) - self.Q[self.s,self.a])\n\
      \        \t\n        # update state to next state\n        self.state = self.next_state\n\
      \        self.s = int(self.convertTupleToIndex(self.state))\n        # choose\
      \ next action\n        self.a = int(self.choose_action())\n        self.cent_freq\
      \ = self.cent_freqs[self.a]\n        \n\t# control interference\n        self.int_freq\
      \ = self.cent_freqs[self.int_pos[self.position]]\n        self.int2_freq = self.cent_freqs[self.int2_pos[self.position]]\n\
      \        self.position += 1\n        if self.position == len(self.cent_freqs)-1:\n\
      \           self.position = 0\n      \n        # send next actions\n       \
      \ PMT_msg_tx =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"freq\"), pmt.from_float(self.cent_freq))\n\
      \        self.message_port_pub(pmt.intern(self.msg_port_name_tx), PMT_msg_tx)\n\
      \        PMT_msg_rx =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"freq\"), pmt.from_float(-self.cent_freq))\n\
      \        self.message_port_pub(pmt.intern(self.msg_port_name_rx), PMT_msg_rx)\n\
      \        PMT_msg_int =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"freq\"),\
      \ pmt.from_float(self.int_freq))\n        self.message_port_pub(pmt.intern(self.msg_port_name_int),\
      \ PMT_msg_int)\n        PMT_msg_int2 =  pmt.dict_add(pmt.make_dict(), pmt.intern(\"\
      freq\"), pmt.from_float(self.int2_freq))\n        self.message_port_pub(pmt.intern(self.msg_port_name_int2),\
      \ PMT_msg_int2)  \n                  \n    def work(self, input_items, output_items):\n\
      \        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    cent_freqs: cent_freq_list
    comment: ''
    log_file: '''../data_logs/results.txt'''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_channels: num_channels
    wide_samp_rate: wide_samp_rate
  states:
    _io_cache: ('Cognitive Engine', 'blk', [('num_channels', '8'), ('wide_samp_rate',
      '2000000.0'), ('cent_freqs', '[]'), ('log_file', 'None')], [('rx_handler_psd',
      'message', 1), ('sensing_results', 'message', 1), ('packet_results', 'message',
      1)], [('int2_cent_freq', 'message', 1), ('int_cent_freq', 'message', 1), ('rx_freq',
      'message', 1), ('tx_freq', 'message', 1)], 'Embedded Python Block example -
      a simple multiply const', ['cent_freqs', 'log_file', 'num_channels', 'wide_samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 1008.0]
    rotation: 180
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    N: N
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport math\n\nclass blk(gr.sync_block):\n\
      \    def __init__(self, num_chans=4, N=64):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='PSD Sensing',\n            in_sig=[(np.float32,N)],\n\
      \            out_sig=None\n        )\n        self.num_chans = num_chans\n \
      \       self.N = N\n               \n        self.total_samps = 0\n        self.total_epochs\
      \ = 0  \n        self.start_flag = 0\n        self.fft_count = 0\n         \
      \       \n        self.portName = 'energy_vec'\n        self.portName2 = 'packet_len_psd'\n\
      \        self.message_port_register_out(pmt.intern(self.portName))   \n    \
      \    self.message_port_register_out(pmt.intern(self.portName2))     \n     \
      \  \n        self.energy_vect = np.zeros(self.num_chans)\n        \n    def\
      \ work(self, input_items, output_items):\n        total_items = input_items[0].shape[0]\
      \ * input_items[0].shape[1]\n        self.total_samps += total_items\n     \
      \   tagTuple = self.get_tags_in_window(0, 0, input_items[0].shape[0])\n\n  \
      \      tags_found = []\n        if not len(tagTuple) == 0:       \n        \
      \    for tag in tagTuple: \n                if not pmt.to_python(tag.key) ==\
      \ 'packet_len':\n                   tag_vect_num = int(input_items[0].shape[0]\
      \ - ((self.total_samps - tag.offset*self.N)/self.N))\n                   tags_found.append([pmt.to_python(tag.key),\
      \ tag_vect_num])\n                if (pmt.to_python(tag.key) == 'burst_start')\
      \ and self.total_epochs > 0:\n                    self.message_port_pub(pmt.intern(self.portName2),\
      \ pmt.to_pmt('change_rx_freq'))\n                   \n                \n   \
      \     for k in range(input_items[0].shape[0]):\n            if not len(tags_found)\
      \ == 0:        \n                if tags_found[0][1] == k and tags_found[0][0]\
      \ == 'burst_start':                              \n                    self.fft_count\
      \ = 0\n                    self.start_flag = 1\n                    self.total_epochs\
      \ += 1\n                    self.energy_vect = np.zeros(self.num_chans)\n  \
      \                  tags_found.pop(0)\n\n            if self.start_flag == 1:\n\
      \                chan_vals = input_items[0][k].reshape((self.num_chans, int(self.N/self.num_chans)))\n\
      \                self.fft_count += 1\n                for kk in range(self.num_chans):\n\
      \                    self.energy_vect[kk] += np.mean(chan_vals[kk])\n      \
      \                  \n            if not len(tags_found) == 0:\n            \
      \    if tags_found[0][1] == k and tags_found[0][0] == 'burst_end':         \
      \                       \n                    self.start_flag = 0          \
      \      \n                    #print('Finished Epoch #', self.total_epochs, ',\
      \ FFTs Calculated: ', self.fft_count)\n                    self.message_port_pub(pmt.intern(self.portName),\
      \ pmt.to_pmt(self.energy_vect/self.fft_count))\n                    tags_found.pop(0)\
      \                     \n                                \n        return len(input_items[0])\
      \                    \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_chans: num_channels
  states:
    _io_cache: ('PSD Sensing', 'blk', [('num_chans', '4'), ('N', '64')], [('0', 'float',
      64)], [('packet_len_psd', 'message', 1), ('energy_vec', 'message', 1)], '',
      ['N', 'num_chans'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 1192.0]
    rotation: 0
    state: enabled
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: N
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(N)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1172.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import sqrt
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 116.0]
    rotation: 0
    state: enabled
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import erfc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 164.0]
    rotation: 0
    state: true
- name: import_0_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: from math import log10
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 212.0]
    rotation: 0
    state: enabled
- name: import_0_0_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import time
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 260.0]
    rotation: 0
    state: enabled
- name: import_1
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 308.0]
    rotation: 0
    state: true
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: signal_samp_rate/2
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: wide_samp_rate
    type: interp_fir_filter_ccf
    width: 0.25*signal_samp_rate/2
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 716.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_0_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: signal_samp_rate/2
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: wide_samp_rate
    type: interp_fir_filter_ccf
    width: 0.25*signal_samp_rate/2
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 716.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: signal_samp_rate/wide_samp_rate
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 736.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_0_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: wide_samp_rate/signal_samp_rate
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1768, 976.0]
    rotation: 180
    state: enabled
- name: note_0_0_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Tunable Variables
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 20.0]
    rotation: 0
    state: true
- name: note_0_0_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Fixed Variables
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 20.0]
    rotation: 0
    state: true
- name: note_0_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Derived Variables
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 20.0]
    rotation: 0
    state: true
- name: ofdm_rx_hier_usrp_0
  id: ofdm_rx_hier_usrp
  parameters:
    affinity: ''
    alias: ''
    cent_freq: int(-cent_freq+freq_usrp)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    signal_samp_rate: signal_samp_rate
    threshold: '0.96'
    wide_samp_rate: wide_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 980.0]
    rotation: 180
    state: enabled
- name: ofdm_tx_hier_usrp_0
  id: ofdm_tx_hier_usrp
  parameters:
    affinity: ''
    alias: ''
    back_pad: back_pad
    buffer_percentage: buffer_percentage
    comment: ''
    front_pad: front_pad
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 716.0]
    rotation: 0
    state: enabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: wide_samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.01'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 628.0]
    rotation: 180
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: sensing_stream
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 804.0]
    rotation: 180
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: sensing_stream
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 1220.0]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_0_0_0, '0', blocks_add_xx_0, '0']
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [analog_sig_source_x_0_0, '0', blocks_add_xx_1, '0']
- [analog_sig_source_x_0_0_0, '0', blocks_add_xx_1, '1']
- [analog_sig_source_x_0_1, '0', blocks_multiply_xx_0_1, '1']
- [blocks_add_xx_0, '0', blocks_tagged_stream_align_0, '0']
- [blocks_add_xx_1, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_complex_to_mag_squared_0, '0', epy_block_2, '0']
- [blocks_multiply_const_vxx_0, '0', channels_channel_model_0, '0']
- [blocks_multiply_const_vxx_0, '0', virtual_sink_0, '0']
- [blocks_multiply_xx_0, '0', blocks_add_xx_1, '2']
- [blocks_multiply_xx_0_1, '0', low_pass_filter_0_0, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [blocks_tagged_stream_align_0, '0', blocks_stream_to_vector_0, '0']
- [channels_channel_model_0, '0', blocks_multiply_xx_0_1, '0']
- [channels_channel_model_0, '0', qtgui_waterfall_sink_x_0, '0']
- [epy_block_0_0, int2_cent_freq, analog_sig_source_x_0_0_0, cmd]
- [epy_block_0_0, int_cent_freq, analog_sig_source_x_0_0, cmd]
- [epy_block_0_0, rx_freq, analog_sig_source_x_0_1, cmd]
- [epy_block_0_0, tx_freq, analog_sig_source_x_0, cmd]
- [epy_block_0_0, tx_freq, ofdm_tx_hier_usrp_0, send_burst]
- [epy_block_2, energy_vec, epy_block_0_0, sensing_results]
- [epy_block_2, packet_len_psd, epy_block_0_0, rx_handler_psd]
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [low_pass_filter_0, '0', blocks_multiply_xx_0, '0']
- [low_pass_filter_0_0, '0', mmse_resampler_xx_0_0, '0']
- [mmse_resampler_xx_0, '0', low_pass_filter_0, '0']
- [mmse_resampler_xx_0_0, '0', ofdm_rx_hier_usrp_0, '0']
- [ofdm_rx_hier_usrp_0, '0', blocks_null_sink_0, '0']
- [ofdm_rx_hier_usrp_0, packet_data, epy_block_0_0, packet_results]
- [ofdm_tx_hier_usrp_0, '0', mmse_resampler_xx_0, '0']
- [virtual_source_0, '0', blocks_add_xx_0, '1']

metadata:
  file_format: 1
  grc_version: 3.10.4.0
